Connection Pooling 학습

1. CP
	- 최대수 제한
	- Conncetion 재사용
	- jdbc API Connection close() 시에 메모리에서 삭제였으나
	CP 사용시에는 Connection Pool 메모리에 반환(재사용)
	
2. DB시스템의 동시 접속자 수 제어하는 기술

3. 필요성
	- 시스템 다운 방지를 위한 접속수 ㅈ어
	
4. 방식
	1. 서버 벤더사 메뉴얼에 맞게 설정
	2. 메카니즘은 전 세계 모든 IT 업계에선 필수 설정
	3. was에 Connection 수 제한
		3-1. 처음부터 최대 사용한 Connection을 사전에 미리 만들어 놓음
		3-2. 최소 수와 최대 수 설정해서 최소개수 만큼 Connection 생성 후에
			그 수 초과 유저가 접속시 최대수 이하로 Connection 생성
			
5. 설정파일 부연 설명
	<Resource 
	name="jdbc/myoracle"  : 설정의 고유한 이름
	auth="Container" : 설정 관리 및 권한은 container(web server, servlet engine..)
	type="javax.sql.DataSource" : cp 기능을 자바 소스에서 사용 가능하게 제공해주는 API
	driverClassName="oracle.jdbc.OracleDriver" : db driver
	url="jdbc:oracle:thin:@127.0.0.1:1521:mysid" : db 접속 설정 url 정보
	username="scott" password="tiger" 
	maxTotal="20" : Connection의 최대 동시 접속 개수
	maxIdle="10" : 아무런 접속자가 현 상태에 없다 하더라도 대기 객체 수
	maxWaitMillis="-1"/> : 20명 이상의 접속자들은 대기시간 설정 속성
							-1은 대기시간 별도로 설정 하지 않겠다는 의미
							
							
6. 실행 원리
	1. was 설정에 등록
		context.xml에 등록
		
	2. 자바 코드로 was의 설정 정보 활용 가능한 객체 생성
	- Context : project명으로도 사용되는 용어, 즉 project 자체를 의미
	- 자원의 이름으로 특정 db 선별해서 반환 받음
	
	- 설정 정보
		java:/comp/env
			java 환경 내부에 재사용 가능한 요소들
			component - 부품/재사용성이 있는 부품
			env - environment의 약어
			
			환경내부의
	
	3. 설정 정보 활용 가능하게 하는 객체에게 자원(특정 db의 cp 정보)검색 및 요청
	4. Connection 객체 활용 및 반환
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	