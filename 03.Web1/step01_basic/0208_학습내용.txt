임폴트 프로젝트 오른쪽버튼 Export -> Export -> Web->WAR File -> .war Destinetion설정 -> 공유


 
url 참고
	http://ip:port/project명/path/../*.html
	http://ip:port/project명/path/../*.jsp
	http://ip:port/project명/path/../servletURLMapping

	http://ip:port/project명/path/../*.html?key1=value1&key2=value2&...
	
	?key1=value1&key2=value2&...
		- web query string이라 표현
		- server에 key와 value 구분해서 데이터 전송하는 형식
		- url 오픈되서 전송시에는 get방식
		- url 오픈 없이 서버에 은닉되서 전송되는 방식 post방식
		- server에서 key로 데이터 뽑을때 getParameter() 



1. 실습 구조 1
	login.html
		- client가 id/pw 입력 후 로그인 버튼 클릭

		- 개발자 관점
			입력창 두개 / 로그인 버튼 하나
			
			수행 로직
				client가 입력후에 버튼 클릭시 데이터를 서버에 전송
				
	LoginValidate.java
		- servlet
		
		- login.html로 부터 전송되는 요청 처리
		- id.pw 값 받아서 유효성 검증 후 메세지를 브라우저에 출력
		
		- url 매핑
			보안을 고려해서 실제 서비스하는 servlet 이름을 가짜 이름으로 매핑
			playdata로 거짓 설정
		
	client
		http://ip:port/step01_basic/loing.html
		http://127.0.0.1:80/step01_basic/login.html
		http://localhost:80/step01_basic/login.html
			입력 후 버튼 클릭
				LoginValidate 요청
				
				
				http://localhost/step01_basic/login.html
				80port는 http 디폴드값 그래서 없어도됨.
			
		http://localhost:80/step01_basic/playdata
		
	server
		tomcat 실행 중이어야 함
			tomcat 내부에 잘 구현되어 배포된 web application이 존재해야 함
			
2. 실습 구조 2 : page이동 기술이 주 학습
	- 출력 전담 servlet 추가 개발
		-> 향후에 SuccessView.java 와 FailView.java를 jsp로 변경 예정
		
	login.html -> LoginValidate.java -> SuccessView.java or FailView.java
	
	login.html
		: 입력 폼 / 요청 방식 / action 속성
		
		LoginValidate.java
		: 데이터 획득 / 검증 / 출력 view 지정(web page이동 기술)
		
		SuccessView.java or FailView.java
		: 메세지값 브라우저에 출력
		
		
	* 다수의 servlet(jsp) 실행시 get 또는 post 방식에 따른 구현 방식 이해하기
		1. forward 방식
			- 특징
				url 변경 없음 / 요청, 응답 객체도 유지
			index.html -> login.html -> LoginValidate.java(forward=dispatcher) -> SuccessView.java로 이동
	
			1. login.html에서 get으로 요청? 
				- server에서 생성되는 HttpServletRequest 객체는 get방식 요청을 인지
			
				LoginValidate의 doGet() 실행
					SuccessView의 doGet() 실행
					
			2. url 변천사
				http://localhost/step01_basic/index.html
					http://localhost/step01_basic/login.html
						http://localhost/step01_basic/playdata
							: playdata라는 url명으로 LoginValidate & SuccessView 를 마치 하나의 servlet으로 간주
						
			3. 실행파일 순서 재확인
				index.html -> login.html -> LoginValidate.java -> SuccessView.java
				
				
		2. redirect 방식
			- 특징
				url이 redirect로 이동된 값으로 최종 변경
				각 servlet 별 새로운 요청, 응답 객체 생성(공유 아님)
				request.setAttribute()로 데이터 저장시 redirect로 이동된 servlet에선 사용 불가(그래서 의미없음)
				
				2. url 변천사
				http://localhost/step01_basic/index.html
					http://localhost/step01_basic/login.html
						http://localhost/step01_basic/fail
						
				3. login 다음에 playdata는 실행은 되었으나 response.sendRedirect()로 인해서 최종 url만 url상에 오픈\
					http://localhost/step01_basic/fail 재요청
						login.html에서의 post or get 요청 유지가 아닌 새로운 get방식으로 인식
						
				
				
				1. post 요청
				LoginValidate doPost()
				FailView doGet()
				1 null
				2 null
				
				
				http://localhost/step01_basic/login.html
				http://localhost/step01_basic/fail
				===========================
				* get 요청
				LoginValidate doPost()
				FailView doGet()
				1 null
				2 null
						
				
				
				
				
				
				
				
-------------------------------------------------				
* web page 이동 기술
- html/jsp/servlet 다 해당되는 기술
	html -> servlet or html or jsp 으로 웹페이지 이동
	servlet -> servlet or html or jsp 웹 페이지로 이동
	
1. html tag
	1. 링크(앵커)
	2. button 클릭
		1. submit
		2. 단순 버튼
		
2. servlet api
	1. forward(dispatcher) 이동 방식
		url 변경없이 화면 이동
			예) 폐쇄성이 있는 카페 게시글 보기 처럼 url 변경없이 웹페이지 이동되는 기술
	2. redirect 이동 방식
		url 변경 
			예) 로그아웃
		
		


				
				
-----------------------------------------------------------------------				
이클립스의 장점
	웹개발시 test를 위해서는
	server가 실행중 & 브라우저가 존재 -> 브라우저에 url값 입력해서 요청.응답 받아야 함
	실행 버튼 하나만으로
		서버가 중지된 상태라면 - 서버 실행 -> application 서비스 -> 접속 대기
		-> 브라우저 실행 -> 브라우저 주소에 url 입력해서 요청 수행 -> 응답 진행...
		
-----------------------------------------------------------------------

		
		
	
		
[매우 중요]	
3. http 통신 규약
	- w3c 에서 제시한 웹 통신 규약
	- 개발자는 규약에 맞게 개발
	1. 서비스 요청 방식(http method)
		1. 데이터를 서버에 전송하는 방식
		2. 데이터 없이 서버에 로직 요청하는 방식
		
	2. 방식 종류
		1. get방식
			- method 속성 설정없이 요청하는 모든 방식의 기본
				http://www.google.com / http://www.naver.com 모든 요청 자체를 get방식으로 인식
				예
					http://ip:port/project명/fail 직접 url로 입력해서 요청하는 것 자체도 get방식
			- 주로 서버에 데이터를 요청하는 방식
			- 게시글 요청, 고객 정보 요청
			- 주로 검색용으로 사용
			- 서버에 전송시키는 데이터가 url상에 오픈되서 전송
			- 보안 고려 불가, 대용량 데이터 적용 불가
			- servlet에서 get 요청 처리 메소드 : doGet()
				: form tag에 method 설정없이 submit시 get방식으로 처리
				: url로 직접 해당 자원(servlet/html/jsp) 요청시 get방식으로 처리
				
			
		2. post방식
			- 서버에 데이터는 은닉해서 전송하는 방식
			- 대량의 데이터 전송시 또는 보안을 고려한 데이터 전송시에 적합
			- 게시글 또는 로그인 정보등
			- servlet에서 post 요청 처리 메소드 : doPost()
				: method="POST" or method="post" 속성 필수로 요청해야만 post방식으로 처리
			
		3. delete방식
			- 서버의 특정 데이터 삭제 요청
		
		4. put방식
			-post와 흡사 데이터 전송에 주로 사용
			
			
4. servlet 이해하기	
	1. client 수 : servlet 객체 수 
									= 100명 : 1개(공유)
	2. client 수 : servlet 객체 수 : doget()/doPost() 
									= 100 : 1 : 100
	2. client 수 : servlet 객체 수 : HttpServletRequest : HttpServletResponese 
									= 100 : 1 : 100 : 100
		
	3. 실습 구조 1단계
		ligin.html -> playdata
			입력/서브밋 - > doGet() or doPost() 실행
			
		질문
			실행을 위해서는 static{}를 제외하고 코드로 명시적으로 호출해서 실행
			doGet()doPost() 호출은 어디서?
				client의 요청을 감지 및 수락하는 최초 관문은 tomcat
					어떤 자원을 어떤 방식으로 요청함을 감지 후 실행
					
		결론
			방식의 메소드 재정의 필수
			호출 방식 지정하는 ui도 개발
			단, 방식에 맞춰 실제 호출하는 코드는 web server 내부에 내장
			= web server 필수
		
5. servlet API
	1. doGet() - get방식 처리 메소드
	2. doPost() - post방식 처리 메소드
	3. HttpServlet - http 프로토콜 지원하는 클래스
					- 상속받아 사용
					- doGet()/doPost()와 같은 service 메소드들 상속
					
	4. HttpServletRequest
		- http 프로토콜 지원
		- 접속한 client만의 요청 정보를 보유하게 되는 객체
		- 입력된 데이터들 다 보유
		- String getParameter("key")
			- client로 부터 전송되는 데이터 획득 메소드
			- input tag에 입력한 데이터 또는 url에 key=value로 구성된 구조의 데이터 획득시 사용하는 메소드
			- 해당 key가 없을 경우 null 반환
			
		- void setAttribute(ket, value)
			- getAttribute(key)로만 데이터 활용 가능
				: 이동된 servlet or jsp에서 사용되는 메소드
			- 요청 객체에 새로운 데이터 저장
				- forward 방식으로만 이동된 servlet에서 getAttribute()로 사용
				- redirect 방식으로 이동된 servlet에선 데이터 사용 불가
			- 이동되는 web page(servlet or jsp)에서 사용하고자 하는 데이터 저장
				
			
				 
	5. HttpServletResponse
		- http 프로토콜 지원
		- 접속한 client에게만 응답하게 하는 기능의 객체
			- 데이터 출력시에 브라우저에 출력
		- setContentType()("mimetype;charset=인코딩")
			: 응답 형식과 응답 인코딩 설정
		- PrintWriter getWriter()
			: 접속한 client의 브라우저에만 출력하는 기능의 2byte 출력 객체
			: response로 부터 제공 받음
			
			
			